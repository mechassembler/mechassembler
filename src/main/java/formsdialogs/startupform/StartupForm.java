package formsdialogs.startupform;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import controller.Controller;
import main.Simulator;
import model.Level;
import model.Model;
import util.ResourceLoader;
import util.parser.LevelParser;
import view.Camera;
import view.View;
import view.builder.CameraBuilder;
import view.builder.ViewBuilder;

import javax.swing.*;
import javax.swing.event.ListDataListener;
import javax.vecmath.Vector3f;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by roman-sosnovsky on 20.01.15.
 */
public class StartupForm {
    private JList availableLevelsList;
    private JButton startSimulationButton;
    private JButton startLevelCreaterButton;
    private JTextArea LevelDescriptionTextArea;
    private JPanel contentPane;
    private List<AvailableLevelListEntry> availableLevelListEntries;
    private main.Simulator sim;

    public StartupForm() {
        availableLevelListEntries = new ArrayList<>();

        List<String> levelsSrcLists = new ResourceLoader().getLevelsList();
        for (String s : levelsSrcLists) {
            String name = s.substring(s.lastIndexOf("/"));
            availableLevelListEntries.add(new AvailableLevelListEntry(name, s, ""));
            // TODO description

        }

        JFrame frame = new JFrame("StartupForm");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setContentPane(contentPane);

        availableLevelsList.setModel(new ListModel() {
            @Override
            public int getSize() {
                return availableLevelListEntries.size();
            }

            @Override
            public Object getElementAt(int index) {
                return availableLevelListEntries.get(index).getName();
            }

            @Override
            public void addListDataListener(ListDataListener l) {

            }

            @Override
            public void removeListDataListener(ListDataListener l) {

            }
        });

        startLevelCreaterButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // TODO creator
            }
        });

        startSimulationButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                File lvlFile = new ResourceLoader().getFile(availableLevelListEntries.get(availableLevelsList.getSelectedIndex()).getLinkTolevel());
                sim = new main.Simulator(lvlFile);
                sim.start();
            }
        });

        frame.pack();
        frame.setVisible(true);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(5, 2, new Insets(0, 0, 0, 0), -1, -1));
        availableLevelsList = new JList();
        availableLevelsList.setSelectionMode(0);
        contentPane.add(availableLevelsList, new GridConstraints(0, 0, 5, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        final Spacer spacer1 = new Spacer();
        contentPane.add(spacer1, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Description:");
        contentPane.add(label1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        startSimulationButton = new JButton();
        startSimulationButton.setText("Start simulation");
        contentPane.add(startSimulationButton, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        startLevelCreaterButton = new JButton();
        startLevelCreaterButton.setText("Start level creater");
        contentPane.add(startLevelCreaterButton, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        LevelDescriptionTextArea = new JTextArea();
        LevelDescriptionTextArea.setEditable(false);
        LevelDescriptionTextArea.setText("");
        contentPane.add(LevelDescriptionTextArea, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}